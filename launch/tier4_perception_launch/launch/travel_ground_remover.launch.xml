<?xml version="1.0"?>
<launch>
    <!-- Parameter files -->
    <arg name="obstacle_segmentation_ground_segmentation_param_path"
         default="$(find-pkg-share autoware_launch)/config/perception/obstacle_segmentation/ground_segmentation/travel_ground_filter.param.yaml"/>
    <arg name="obstacle_segmentation_ground_segmentation_elevation_map_param_path"
         default="$(find-pkg-share autoware_launch)/config/perception/obstacle_segmentation/ground_segmentation/elevation_map_parameters.yaml"
    />
    <arg name="occupancy_grid_map_method" default="pointcloud_based_occupancy_grid_map"/>
    <arg name="occupancy_grid_map_param_path" default="$(find-pkg-share autoware_launch)/config/perception/occupancy_grid_map/$(var occupancy_grid_map_method).param.yaml"/>
    
    <arg name="occupancy_grid_map_updater" default="binary_bayes_filter_updater"/>
    <arg name="occupancy_grid_map_updater_param_path" default="$(find-pkg-share autoware_launch)/config/perception/occupancy_grid_map/$(var occupancy_grid_map_updater).param.yaml"/>

    <!-- common parameters -->
    <arg name="input/pointcloud" default="/sensing/lidar/concatenated/pointcloud" description="The topic will be used in the detection module"/>

    <arg name="use_pointcloud_container" default="false" description="launch pointcloud container"/>
    <arg name="pointcloud_container_name" default="pointcloud_container"/>

    <arg name="use_sim_time" default="false" description="use_sim_time"/>

    <arg name="map_path" default="/home/yildiz/Downloads/YTU_HDMap/"/>
    <arg name="vehicle_model" description="vehicle model name"/>
    <arg name="sensor_model" description="sensor model name"/> 

    <!-- Global parameters -->
    <group scoped="false">
        <include file="$(find-pkg-share global_parameter_loader)/launch/global_params.launch.py">
            <arg name="use_sim_time" value="$(var use_sim_time)"/>
            <arg name="vehicle_model" value="$(var vehicle_model)"/>
        </include>
    </group>

    <!-- Pointcloud container -->
    <group if="$(var use_pointcloud_container)">
        <include file="$(find-pkg-share autoware_launch)/launch/pointcloud_container.launch.py">
            <arg name="use_multithread" value="true"/>
            <arg name="container_name" value="$(var pointcloud_container_name)"/>
        </include>
    </group>


    <arg name="lanelet2_map_file" default="lanelet2_map.osm" description="lanelet2 map file name"/>
    <arg name="pointcloud_map_file" default="pointcloud_map.pcd" description="pointcloud map file name"/>
    <include file="$(find-pkg-share autoware_launch)/launch/components/tier4_map_component.launch.xml"/>

    <!-- perception module -->
    <group>
        <push-ros-namespace namespace="perception"/>

        <!-- object segmentation module -->
        <group>
            <push-ros-namespace namespace="obstacle_segmentation"/>
            <include file="$(find-pkg-share tier4_perception_launch)/launch/obstacle_segmentation/ground_segmentation/ground_segmentation.launch.py">
                <arg name="base_frame" value="base_link"/>
                <arg name="use_intra_process" value="true"/>
                <arg name="use_multithread" value="true"/>
                <arg name="use_pointcloud_container" value="$(var use_pointcloud_container)"/>
                <arg name="container_name" value="$(var pointcloud_container_name)"/>
                <arg name="input/pointcloud" value="$(var input/pointcloud)"/>
            </include>
        </group>

        <!-- occupancy grid map module -->
        <group>
            <push-ros-namespace namespace="occupancy_grid_map"/>
            <include file="$(find-pkg-share tier4_perception_launch)/launch/occupancy_grid_map/probabilistic_occupancy_grid_map.launch.xml">
                <arg name="input/obstacle_pointcloud" value="/perception/obstacle_segmentation/single_frame/pointcloud_raw"/>
                <arg name="input/raw_pointcloud" value="$(var input/pointcloud)"/>
                <arg name="output" value="/perception/occupancy_grid_map/map"/>
                <arg name="use_intra_process" value="true"/>
                <arg name="use_multithread" value="true"/>
                <arg name="use_pointcloud_container" value="$(var use_pointcloud_container)"/>
                <arg name="container_name" value="$(var pointcloud_container_name)"/>
                <arg name="occupancy_grid_map_method" value="$(var occupancy_grid_map_method)"/>
                <arg name="occupancy_grid_map_param_path" value="$(var occupancy_grid_map_param_path)"/>
                <arg name="occupancy_grid_map_updater" value="$(var occupancy_grid_map_updater)"/>
                <arg name="occupancy_grid_map_updater_param_path" value="$(var occupancy_grid_map_updater_param_path)"/>
            </include>
        </group>

    </group>
</launch>
